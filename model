import streamlit as st
import pandas as pd
import joblib
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer

# Load or Train Models (In Production, Load Pre-Trained Models)
def train_models():
    # Simulated DataFrame (Replace with your actual dataset)
    data = pd.DataFrame({
        "Converted": [10, 50, 100, 200, 500],
        "Revenue": [1000, 5000, 10000, 20000, 50000],
        "Spend": [500, 2500, 5000, 10000, 25000],
        "Profit": [500, 2500, 5000, 10000, 25000],
    })

    X = data[['Converted']]
    y = data[['Revenue', 'Spend', 'Profit']]

    imputer = SimpleImputer(strategy='mean')
    X = imputer.fit_transform(X)
    y = imputer.fit_transform(y)

    # Train Models
    rf_model_revenue = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model_spend = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model_profit = RandomForestRegressor(n_estimators=100, random_state=42)

    rf_model_revenue.fit(X, y[:, 0])
    rf_model_spend.fit(X, y[:, 1])
    rf_model_profit.fit(X, y[:, 2])

    # Save Models
    joblib.dump(rf_model_revenue, "rf_model_revenue.pkl")
    joblib.dump(rf_model_spend, "rf_model_spend.pkl")
    joblib.dump(rf_model_profit, "rf_model_profit.pkl")

# Uncomment the next line **ONLY** if you need to retrain models
# train_models()

# Load Models
rf_model_revenue = joblib.load("rf_model_revenue.pkl")
rf_model_spend = joblib.load("rf_model_spend.pkl")
rf_model_profit = joblib.load("rf_model_profit.pkl")

# Streamlit UI
st.title("ðŸ“ˆ Revenue Prediction App")
st.write("Enter the number of **billable calls** to predict revenue, spend, and profit.")

# User Input
converted_calls = st.number_input("Enter Billable Calls:", min_value=1, step=1, value=10)

# Prediction Function
def predict(converted_calls):
    input_data = pd.DataFrame([[converted_calls]], columns=['Converted'])
    predicted_revenue = rf_model_revenue.predict(input_data)[0]
    predicted_spend = rf_model_spend.predict(input_data)[0]
    predicted_profit = rf_model_profit.predict(input_data)[0]
    return predicted_revenue, predicted_spend, predicted_profit

# Run Prediction and Display Results
if st.button("Predict"):
    revenue, spend, profit = predict(converted_calls)
    st.success(f"ðŸ“Š **Predicted Revenue:** ${revenue:,.2f}")
    st.info(f"ðŸ’° **Predicted Spend:** ${spend:,.2f}")
    st.warning(f"ðŸ“ˆ **Predicted Profit:** ${profit:,.2f}")
